# -*- coding: utf-8 -*-
"""energy prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYoAvChvgaOktf9pnl6vHySgvE6HvAim
"""

!nvidia-smi

from google.colab import drive
drive.mount('./content/')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/content/MyDrive/new

# Commented out IPython magic to ensure Python compatibility.
from __future__ import absolute_import, division, print_function,unicode_literals
try:
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as npa
import os
import pandas as pd

"""# 에너지 사용량 예측

"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

import warnings
warnings.filterwarnings("ignore")

"""데이터셋 살펴보기"""

data = pd.read_csv("/content/content/MyDrive/new/energy.csv")
features=['p_usage','wday','day_type','hour','temp','rh']
df = data[features]
print(df.info())
df.head(10)

data.plot(subplots=True)

dataset.shape

BUFFER_SIZE = 256
BATCH_SIZE = 3500 
EVALUATION_INTERVAL = 200
EPOCHS = 30 #몇 번 교육하는지
TRAIN_SPLIT = 60000

dataset = df.values
data_mean = dataset[:TRAIN_SPLIT].mean(axis=0)
data_std = dataset[:TRAIN_SPLIT].std(axis=0)

dataset = (dataset - data_mean) / data_std

def multivariate_data(dataset, target, start_index, end_index, history_size, target_size, step, single_step=False):
  data=[]
  labels=[]

  start_index = start_index + history_size
  if end_index is None:
    end_index = len(dataset)-target_size

  for i in range(start_index, end_index):
    indices = range(i-history_size, i, step)
    data.append(dataset[indices])

    if single_step :
      labels.append(target[i+target_size])
    else:
      labels.append(target[i+target_size])

  return np.array(data), np.array(labels)

past_history = 30
future_target = 1
STEP = 1

x_train, y_train = multivariate_data(dataset, dataset[:, 1], 0,    TRAIN_SPLIT, 
                                     past_history, future_target, STEP, single_step=True)
x_valid, y_valid = multivariate_data(dataset, dataset[:, 1], TRAIN_SPLIT, None, past_history, 
                                     future_target, STEP, single_step=True)

TRAIN_SPLIT

x_train.shape

y_train[0]

train_data = tf.data.Dataset.from_tensor_slices((x_train, y_train))
train_data= train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

valid_data = tf.data.Dataset.from_tensor_slices((x_valid, y_valid))
valid_data = valid_data.cache().batch(BATCH_SIZE).repeat()

single_step_model = tf.keras.models.Sequential()
single_step_model.add(tf.keras.layers.LSTM(32, input_shape = x_train.shape[-2:]))
single_step_model.add(tf.keras.layers.Dense(1))

single_step_model.compile(optimizer = tf.keras.optimizers.RMSprop(), loss='mae')

for x, y in valid_data.take(1):
  print(single_step_model.predict(x).shape)

single_step_history = single_step_model.fit(train_data, epochs=EPOCHS, steps_per_epoch=EVALUATION_INTERVAL,
                                            validation_data = valid_data, validation_steps=50)

def plot_train_history(history, title):
  loss = history.history['loss']
  val_loss = history.history['val_loss']

  epochs = range(len(loss))

  plt.figure()

  plt.plot(epochs, loss, 'b', label='Training loss')
  plt.plot(epochs, val_loss, 'r', label ='Validation loss')
  plt.title(title)
  plt.legend()

  plt.show()

plot_train_history(single_step_history, 'Single Step Training and validatiom loss')

future_target = 72

x_train, y_train = multivariate_data(dataset, dataset[: ,1], 0, TRAIN_SPLIT, past_history,
                                     future_target, STEP)
x_valid, y_valid = multivariate_data(dataset, dataset[:, 1],TRAIN_SPLIT,None, past_history,
                                     future_target, STEP)

x_train.shape

y_train.shape

train_data =tf.data.Dataset.from_tensor_slices((x_train, y_train))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

valid_data = tf.data.Dataset.from_tensor_slices((x_valid, y_valid))
valid_data = valid_data.batch(BATCH_SIZE).repeat()

def multi_step_plot(history, true_future, prediction):
  plt.figure(figsize=(12, 6))
  num_in = create_time_steps(len(history))
  num_out = len(true_future)

  plt.plot(num_in, np.array(history[:,1]), label='History')
  plt.plot(np.arange(num_out)/STEP, np.array(true_future),'bo', label='True Future')
  
  if prediction.any():
    plt.plot(np,arange(num_out)/STEP, np.array(prediction),'ro', label='Predicted Future')
    
  plt.legend(loc='upper left')
  plt.show()

def create_time_steps(length):
  return list(range(-length, 0))

for x,y in train_data.take(1):
  multi_step_plot(x[0], y[0], np.array([0]))

